// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  userId         String          @unique @db.String
  userName       String          @unique @db.String
  profileImage   String?
  avatarImage    String?
  email          String?         @unique @db.String
  phoneNunmber   String?         @unique @db.String
  firstName      String?
  lastName       String?
  location       String?
  work           String?
  website        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  followers      Follow[]        @relation("userFollows")
  following      Follow[]        @relation("userFollowing")
  followRequest  FollowRequest[] @relation("followSender")
  followReceiver FollowRequest[] @relation("followReceiver")
  blocksSent     Block[]         @relation("blockSender")
  blocksReceived Block[]         @relation("blockReceiver")
  Story          Story[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  LikeId    String   @unique @default(cuid())
  user      User     @relation(fields: [userId], references: [userId])
  userId    String   @db.String
  post      Post     @relation(fields: [postId], references: [postId])
  postId    String   @db.String
  comment   Comment  @relation(fields: [commentId], references: [commentId])
  commentId String   @db.String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  postId    String    @unique @default(cuid()) @db.String
  postBody  String
  user      User      @relation(fields: [userId], references: [userId])
  userId    String    @db.String
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId String   @unique @default(cuid()) @db.String
  body      String
  user      User     @relation(fields: [userId], references: [userId])
  userId    String   @db.String
  likes     Like[]
  post      Post     @relation(fields: [commentId], references: [postId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   DateTime
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId   String   @unique @default(cuid()) @db.String
  follower    User     @relation("userFollows", fields: [followerId], references: [userId])
  followerId  String   @db.String
  following   User     @relation("userFollowing", fields: [followingId], references: [userId])
  followingId String   @db.String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId  String   @unique @default(cuid()) @db.String
  sender     User     @relation("followSender", fields: [senderId], references: [userId])
  senderId   String   @db.String
  receiver   User     @relation("followReceiver", fields: [receiverId], references: [userId])
  receiverId String   @db.String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deleted    DateTime

  @@unique([senderId, receiverId])
}

model Block {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  commentId  String   @unique @default(cuid()) @db.String
  sender     User     @relation("blockSender", fields: [senderId], references: [userId])
  senderId   String   @db.String
  receiver   User     @relation("blockReceiver", fields: [receiverId], references: [userId])
  receiverId String   @db.String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deleted    DateTime

  @@unique([senderId, receiverId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  storyId   String   @unique @default(cuid()) @db.String
  body      String
  user      User     @relation(fields: [userId], references: [userId])
  userId    String   @unique @db.String
  img       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}
